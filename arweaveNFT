#
#  Panoramix v4 Oct 2019 
#  Decompiled source of 0x7F72528229F85C99D8843C0317eF91F4A2793Edf
# 
#  Let's make the world open source 
# 
#
#  I failed with these: 
#  - safeBatchTransferFrom(address _from, address _to, uint256[] _ids, uint256[] _values, bytes _data)
#  All the rest is below.
#

const unknown4060b25e = '2.0.2'
const unknownc311c523 = 1

def storage:
  stor0 is mapping of uint64 at storage 0
  stor1 is mapping of uint8 at storage 1
  owner is addr at storage 2
  unknowncd7c0326Address is addr at storage 3
  name is array of uint256 at storage 4
  symbol is array of uint256 at storage 5
  totalSupply is mapping of uint256 at storage 6
  stor7 is array of struct at storage 7

def name() payable: 
  return name[0 len name.length]

def owner() payable: 
  return owner

def symbol() payable: 
  return symbol[0 len symbol.length]

def totalSupply(uint256 _id) payable: 
  require calldata.size - 4 >= 32
  return totalSupply[_id]

def unknowncd7c0326() payable: 
  return unknowncd7c0326Address

#
#  Regular functions
#

def _fallback() payable: # default function
  revert

def isOwner() payable: 
  return (caller == owner)

def exists(uint256 _tokenId) payable: 
  require calldata.size - 4 >= 32
  return (totalSupply[_tokenId] > 0)

def supportsInterface(bytes4 _interfaceId) payable: 
  require calldata.size - 4 >= 32
  if Mask(32, 224, _interfaceId) != 0x1ffc9a700000000000000000000000000000000000000000000000000000000:
      if Mask(32, 224, _interfaceId) != 0xd9b67a2600000000000000000000000000000000000000000000000000000000:
          return 0
  return 1

def setApprovalForAll(address _to, bool _approved) payable: 
  require calldata.size - 4 >= 64
  stor1[caller][addr(_to)] = uint8(_approved)
  log ApprovalForAll(
        address owner=_approved,
        address operator=caller,
        bool approved=_to)

def isApprovedForAll(address _owner, address _operator) payable: 
  require calldata.size - 4 >= 64
  require ext_code.size(unknowncd7c0326Address)
  static call unknowncd7c0326Address.proxies(address param1) with:
          gas gas_remaining wei
         args _owner
  if not ext_call.success:
      revert with ext_call.return_data[0 len return_data.size]
  require return_data.size >= 32
  if ext_call.return_data_operator:
      return bool(stor1[addr(_owner)][addr(_operator)])
  return 1

def renounceOwnership() payable: 
  if owner != caller:
      require ext_code.size(unknowncd7c0326Address)
      static call unknowncd7c0326Address.proxies(address param1) with:
              gas gas_remaining wei
             args owner
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data[12 len 20] != caller:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      46,
                      0x44455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c45525f49535f4e4f545f4f574e45,
                      mem[210 len 18]
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=0)
  owner = 0

def transferOwnership(address _newOwner) payable: 
  require calldata.size - 4 >= 32
  if owner != caller:
      require ext_code.size(unknowncd7c0326Address)
      static call unknowncd7c0326Address.proxies(address param1) with:
              gas gas_remaining wei
             args owner
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data[12 len 20] != caller:
          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                      32,
                      46,
                      0x44455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c45525f49535f4e4f545f4f574e45,
                      mem[210 len 18]
  if not _newOwner:
      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 
                  32,
                  38,
                  0x504f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573,
                  mem[202 len 26]
  log OwnershipTransferred(
        address previousOwner=owner,
        address newOwner=_newOwner)
  owner = _newOwner

def balanceOf(address _owner, uint256 _cardId) payable: 
  require calldata.size - 4 >= 64
  if owner != _owner:
      require ext_code.size(unknowncd7c0326Address)
      static call unknowncd7c0326Address.proxies(address param1) with:
              gas gas_remaining wei
             args owner
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data_owner:
          return uint256(stor0[addr(_owner)][_cardId])
  if not _cardId:
      if uint256(stor0[addr(_owner)][_cardId]) < uint256(stor0[addr(_owner)][_cardId]):
          revert with 0, 'SafeMath#add: OVERFLOW'
      return uint256(stor0[addr(_owner)][_cardId])
  if _cardId > 1111:
      if uint256(stor0[addr(_owner)][_cardId]) < uint256(stor0[addr(_owner)][_cardId]):
          revert with 0, 'SafeMath#add: OVERFLOW'
      return uint256(stor0[addr(_owner)][_cardId])
  if totalSupply[_cardId] > 1:
      revert with 0, 'SafeMath#sub: UNDERFLOW'
  if uint256(stor0[addr(_owner)][_cardId]) + -totalSupply[_cardId] + 1 < uint256(stor0[addr(_owner)][_cardId]):
      revert with 0, 'SafeMath#add: OVERFLOW'
  return (uint256(stor0[addr(_owner)][_cardId]) + -totalSupply[_cardId] + 1)

def unknown4e1273f4(array _param1, array _param2) payable: 
  require calldata.size - 4 >= 64
  require _param1 <= 4294967296
  require _param1 + 36 <= calldata.size
  require _param1.length <= 4294967296 and _param1 + (32 * _param1.length) + 36 <= calldata.size
  mem[128 len 32 * _param1.length] = call.data[_param1 + 36 len 32 * _param1.length]
  require _param2 <= 4294967296
  require _param2 + 36 <= calldata.size
  require _param2.length <= 4294967296 and _param2 + (32 * _param2.length) + 36 <= calldata.size
  mem[(32 * _param1.length) + 128] = _param2.length
  mem[(32 * _param1.length) + 160 len 32 * _param2.length] = call.data[_param2 + 36 len 32 * _param2.length]
  if _param1.length != _param2.length:
      revert with 0, 
                  32,
                  44,
                  0x48455243313135352362616c616e63654f6642617463683a20494e56414c49445f41525241595f4c454e4754,
                  mem[(32 * _param1.length) + (32 * _param2.length) + 272 len 20]
  mem[(32 * _param1.length) + (32 * _param2.length) + 160] = _param1.length
  if _param1.length:
      mem[(32 * _param1.length) + (32 * _param2.length) + 192 len 32 * _param1.length] = code.data * _param1.length]
  idx = 0
  while idx < _param1.length:
      require idx < _param1.length
      require idx < _param2.length
      mem[0] = mem[(32 * idx) + (32 * _param1.length) + 160]
      mem[32] = sha3(mem[(32 * idx) + 140 len 20], 0)
      require idx < _param1.length
      mem[(32 * idx) + (32 * _param1.length) + (32 * _param2.length) + 192] = uint256(stor0[mem[(32 * idx) + 140 len 20]][mem[(32 * idx) + (32 * _param1.length) + 160]])
      idx = idx + 1
      continue 
  mem[(64 * _param1.length) + (32 * _param2.length) + 192] = 32
  mem[(64 * _param1.length) + (32 * _param2.length) + 224] = _param1.length
  mem[(64 * _param1.length) + (32 * _param2.length) + 256 len floor32(_param1.length)] = mem[(32 * _param1.length) + (32 * _param2.length) + 192 len floor32(_param1.length)]
  return memory
    from (64 * _param1.length) + (32 * _param2.length) + 192
     len (161 * _param1.length) + 64

def uri(uint256 _id) payable: 
  require calldata.size - 4 >= 32
  if not _id:
      mem[192] = uint256(stor7.field_0)
      idx = 192
      s = 0
      while stor7.length + 160 > idx:
          mem[idx + 32] = stor7[s].field_256
          idx = idx + 32
          s = s + 1
          continue 
      mem[stor7.length + 192 len 0] = None
      mem[stor7.length + 193] = '.json'
      mem[stor7.length + 198] = 32
      mem[stor7.length + 230] = mem[160]
      mem[stor7.length + 262 len ceil32(mem[160])] = mem[192 len ceil32(mem[160])]
      if not mem[160] % 32:
          return 32, mem[stor7.length + 230 len mem[160] + 32]
      mem[floor32(mem[160]) + stor7.length + 262] = mem[floor32(mem[160]) + stor7.length + -(mem[160] % 32) + 294 len mem[160] % 32]
      return Array(len=mem[160], data=mem[stor7.length + 262 len floor32(mem[160]) + 32])
  mem[64] = 160
  mem[96] = 4
  mem[128] = '0000'
  s = 3
  idx = _id
  while idx:
      require s < 4
      mem[s + 128 len 8] = Mask(8, -(('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) + 256, 0) << (('mask_shl', 8, 0, 245, ('add', 48, ('mod', ('var', 0), 10))), 0) - 256
      s = s - 1
      idx = idx / 10
      continue 
  _46 = mem[64]
  mem[0] = 7
  mem[mem[64] + 32] = uint256(stor7.field_0)
  idx = mem[64] + 32
  s = 0
  while _46 + stor7.length > idx:
      mem[idx + 32] = stor7[s].field_256
      idx = idx + 32
      s = s + 1
      continue 
  _122 = mem[96]
  mem[_46 + stor7.length + 32 len floor32(mem[96])] = mem[128 len floor32(mem[96])]
  mem[_46 + stor7.length + floor32(mem[96]) + -(mem[96] % 32) + 64 len mem[96] % 32] = mem[floor32(mem[96]) + -(mem[96] % 32) + 160 len mem[96] % 32]
  mem[_122 + _46 + stor7.length + 32] = '.json'
  _155 = mem[64]
  mem[64] = _122 + _46 + stor7.length + 37
  mem[_122 + _46 + stor7.length + 37] = 32
  mem[_122 + _46 + stor7.length + 69] = mem[_155]
  _160 = mem[_155]
  mem[_122 + _46 + stor7.length + 101 len ceil32(mem[_155])] = mem[_155 + 32 len ceil32(mem[_155])]
  if not _160 % 32:
      return 32, mem[_122 + _46 + stor7.length + 69 len _160 + 32]
  mem[floor32(_160) + _122 + _46 + stor7.length + 101] = mem[floor32(_160) + _122 + _46 + stor7.length + -(_160 % 32) + 133 len _160 % 32]
  return 32, mem[_122 + _46 + stor7.length + 69 len floor32(_160) + 64]

def unknown731133e9(addr _param1, uint256 _param2, uint256 _param3, array _param4) payable: 
  require calldata.size - 4 >= 128
  require _param4 <= 4294967296
  require _param4 + 36 <= calldata.size
  require _param4.length <= 4294967296 and _param4 + _param4.length + 36 <= calldata.size
  if owner == caller:
      if not _param2:
          if _param3 > 0:
              revert with 0, 
                          32,
                          53,
                          0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                          mem[ceil32(_param4.length) + 249 len 11]
      else:
          if _param2 > 1111:
              if _param3 > 0:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_param4.length) + 249 len 11]
          else:
              if totalSupply[_param2] > 1:
                  revert with 0, 'SafeMath#sub: UNDERFLOW'
              if _param3 > -totalSupply[_param2] + 1:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_param4.length) + 249 len 11]
      if uint256(stor0[addr(_param1)][_param2]) + _param3 < uint256(stor0[addr(_param1)][_param2]):
          revert with 0, 'SafeMath#add: OVERFLOW'
      uint256(stor0[addr(_param1)][_param2]) += _param3
      if totalSupply[_param2] + _param3 < totalSupply[_param2]:
          revert with 0, 'SafeMath#add: OVERFLOW'
      totalSupply[_param2] += _param3
      mem[ceil32(_param4.length) + 128] = _param2
      mem[ceil32(_param4.length) + 160] = _param3
      log 0xc3d58168: Mask(8 * -ceil32(_param4.length) + _param4.length + 32, 0, 0), mem[_param4.length + 160 len -_param4.length + ceil32(_param4.length) + 32], caller, owner, _param1
  else:
      require ext_code.size(unknowncd7c0326Address)
      static call unknowncd7c0326Address.proxies(address param1) with:
              gas gas_remaining wei
             args owner
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data[12 len 20] != caller:
          revert with 0, 
                      32,
                      46,
                      0x44455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c45525f49535f4e4f545f4f574e45,
                      mem[ceil32(_param4.length) + 242 len 18]
      if not _param2:
          if _param3 > 0:
              revert with 0, 
                          32,
                          53,
                          0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                          mem[ceil32(_param4.length) + 249 len 11]
      else:
          if _param2 > 1111:
              if _param3 > 0:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_param4.length) + 249 len 11]
          else:
              if totalSupply[_param2] > 1:
                  revert with 0, 'SafeMath#sub: UNDERFLOW'
              if _param3 > -totalSupply[_param2] + 1:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_param4.length) + 249 len 11]
      if uint256(stor0[addr(_param1)][_param2]) + _param3 < uint256(stor0[addr(_param1)][_param2]):
          revert with 0, 'SafeMath#add: OVERFLOW'
      uint256(stor0[addr(_param1)][_param2]) += _param3
      if totalSupply[_param2] + _param3 < totalSupply[_param2]:
          revert with 0, 'SafeMath#add: OVERFLOW'
      totalSupply[_param2] += _param3
      log 0xc3d58168: 0, Mask(224, 0, _param2), _param3, caller, owner, _param1
  if ext_code.hash(_param1):
      if ext_code.hash(_param1) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
          require ext_code.size(_param1)
          call _param1 with:
               gas gas_remaining wei
              args caller, owner, _param2, _param3, Array(len=_param4.length, data=_param4[all])
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
              revert with 0, 
                          32,
                          58,
                          0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                          _param3 % 281474976710656

def unknownb48ab8b6(addr _param1, array _param2, array _param3, array _param4) payable: 
  require calldata.size - 4 >= 128
  require _param2 <= 4294967296
  require _param2 + 36 <= calldata.size
  require _param2.length <= 4294967296 and _param2 + (32 * _param2.length) + 36 <= calldata.size
  mem[128 len 32 * _param2.length] = call.data[_param2 + 36 len 32 * _param2.length]
  require _param3 <= 4294967296
  require _param3 + 36 <= calldata.size
  require _param3.length <= 4294967296 and _param3 + (32 * _param3.length) + 36 <= calldata.size
  mem[(32 * _param2.length) + 128] = _param3.length
  mem[(32 * _param2.length) + 160 len 32 * _param3.length] = call.data[_param3 + 36 len 32 * _param3.length]
  require _param4 <= 4294967296
  require _param4 + 36 <= calldata.size
  require _param4.length <= 4294967296 and _param4 + _param4.length + 36 <= calldata.size
  mem[(32 * _param2.length) + (32 * _param3.length) + 160] = _param4.length
  mem[(32 * _param2.length) + (32 * _param3.length) + 192 len _param4.length] = _param4[all]
  mem[(32 * _param2.length) + (32 * _param3.length) + _param4.length + 192] = 0
  if owner == caller:
      idx = 0
      while idx < _param2.length:
          require idx < _param2.length
          if not mem[(32 * idx) + 128]:
              require idx < _param3.length
              if mem[(32 * idx) + (32 * _param2.length) + 160] > 0:
                  revert with 0, 
                              32,
                              58,
                              0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
          else:
              if mem[(32 * idx) + 128] > 1111:
                  require idx < _param3.length
                  if mem[(32 * idx) + (32 * _param2.length) + 160] > 0:
                      revert with 0, 
                                  32,
                                  58,
                                  0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
              else:
                  mem[0] = mem[(32 * idx) + 128]
                  mem[32] = 6
                  if totalSupply[mem[(32 * idx) + 128]] > 1:
                      revert with 0, 'SafeMath#sub: UNDERFLOW'
                  require idx < _param3.length
                  if mem[(32 * idx) + (32 * _param2.length) + 160] > -totalSupply[mem[(32 * idx) + 128]] + 1:
                      revert with 0, 
                                  32,
                                  58,
                                  0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
          idx = idx + 1
          continue 
      if _param2.length != _param3.length:
          revert with 0, 
                      32,
                      48,
                      0x48455243313135355472616461626c652362617463684d696e743a20494e56414c49445f4152524159535f4c454e4754,
                      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 308 len 16]
      require 0 < _param2.length
      idx = 0
      while idx < _param2.length:
          require idx < _param2.length
          if owner != owner:
              revert with 0, 
                          32,
                          55,
                          0x52455243313135355472616461626c652362617463684d696e743a204d554c5449504c455f4f524947494e535f4e4f545f414c4c4f5745,
                          mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 315 len 9]
          require idx < _param3.length
          if uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]) + mem[(32 * idx) + (32 * _param2.length) + 160] < uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]) += mem[(32 * idx) + (32 * _param2.length) + 160]
          require idx < _param3.length
          if totalSupply[mem[(32 * idx) + 128]] + mem[(32 * idx) + (32 * _param2.length) + 160] < totalSupply[mem[(32 * idx) + 128]]:
              revert with 0, 'SafeMath#add: OVERFLOW'
          mem[0] = mem[(32 * idx) + 128]
          mem[32] = 6
          totalSupply[mem[(32 * idx) + 128]] += mem[(32 * idx) + (32 * _param2.length) + 160]
          idx = idx + 1
          continue 
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 192] = 64
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 288 len floor32(_param2.length)] = call.data[_param2 + 36 len floor32(_param2.length)]
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 224] = (32 * _param2.length) + 96
      mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 288] = _param3.length
      mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 320 len floor32(_param3.length)] = call.data[_param3 + 36 len floor32(_param3.length)]
      log 0x4a39dc06: Mask(8 * -ceil32(_param4.length) + _param4.length + 32, 0, 0), mem[(32 * _param2.length) + (32 * _param3.length) + _param4.length + 224 len ceil32(_param4.length) + -_param4.length + 32], _param2.length, call.data[_param2 + 36 len floor32(_param2.length)], mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + floor32(_param2.length) + 288 len (32 * _param2.length) + (32 * _param3.length) + -floor32(_param2.length) + 32], caller, owner, _param1
  else:
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 196] = owner
      require ext_code.size(unknowncd7c0326Address)
      static call unknowncd7c0326Address.proxies(address param1) with:
              gas gas_remaining wei
             args owner
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 192] = ext_call.return_data[0]
      if not ext_call.success:
          revert with ext_call.return_data[0 len return_data.size]
      require return_data.size >= 32
      if ext_call.return_data[12 len 20] != caller:
          revert with 0, 
                      32,
                      46,
                      0x44455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c45525f49535f4e4f545f4f574e45,
                      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 306 len 18]
      idx = 0
      while idx < _param2.length:
          require idx < _param2.length
          if not mem[(32 * idx) + 128]:
              require idx < _param3.length
              if mem[(32 * idx) + (32 * _param2.length) + 160] > 0:
                  revert with 0, 
                              32,
                              58,
                              0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
          else:
              if mem[(32 * idx) + 128] > 1111:
                  require idx < _param3.length
                  if mem[(32 * idx) + (32 * _param2.length) + 160] > 0:
                      revert with 0, 
                                  32,
                                  58,
                                  0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
              else:
                  mem[0] = mem[(32 * idx) + 128]
                  mem[32] = 6
                  if totalSupply[mem[(32 * idx) + 128]] > 1:
                      revert with 0, 'SafeMath#sub: UNDERFLOW'
                  require idx < _param3.length
                  if mem[(32 * idx) + (32 * _param2.length) + 160] > -totalSupply[mem[(32 * idx) + 128]] + 1:
                      revert with 0, 
                                  32,
                                  58,
                                  0x454173736574436f6e74726163742362617463684d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 318 len 6]
          idx = idx + 1
          continue 
      if _param2.length != _param3.length:
          revert with 0, 
                      32,
                      48,
                      0x48455243313135355472616461626c652362617463684d696e743a20494e56414c49445f4152524159535f4c454e4754,
                      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 308 len 16]
      require 0 < _param2.length
      idx = 0
      while idx < _param2.length:
          require idx < _param2.length
          if owner != owner:
              revert with 0, 
                          32,
                          55,
                          0x52455243313135355472616461626c652362617463684d696e743a204d554c5449504c455f4f524947494e535f4e4f545f414c4c4f5745,
                          mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 315 len 9]
          require idx < _param3.length
          if uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]) + mem[(32 * idx) + (32 * _param2.length) + 160] < uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_param1)][mem[(32 * idx) + 128]]) += mem[(32 * idx) + (32 * _param2.length) + 160]
          require idx < _param3.length
          if totalSupply[mem[(32 * idx) + 128]] + mem[(32 * idx) + (32 * _param2.length) + 160] < totalSupply[mem[(32 * idx) + 128]]:
              revert with 0, 'SafeMath#add: OVERFLOW'
          mem[0] = mem[(32 * idx) + 128]
          mem[32] = 6
          totalSupply[mem[(32 * idx) + 128]] += mem[(32 * idx) + (32 * _param2.length) + 160]
          idx = idx + 1
          continue 
      mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 288 len floor32(_param2.length)] = call.data[_param2 + 36 len floor32(_param2.length)]
      mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 288] = _param3.length
      mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 320 len floor32(_param3.length)] = call.data[_param3 + 36 len floor32(_param3.length)]
      log 0x4a39dc06: 0, 64, (32 * _param2.length) + 96, _param2.length, call.data[_param2 + 36 len floor32(_param2.length)], mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + floor32(_param2.length) + 288 len (32 * _param2.length) + (32 * _param3.length) + -floor32(_param2.length) + 32], caller, owner, _param1
  if ext_code.hash(_param1):
      if ext_code.hash(_param1) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
          mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 192] = 0xbc197c8100000000000000000000000000000000000000000000000000000000
          mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 388 len floor32(_param2.length)] = call.data[_param2 + 36 len floor32(_param2.length)]
          mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 388] = _param3.length
          mem[(64 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + 420 len floor32(_param3.length)] = call.data[_param3 + 36 len floor32(_param3.length)]
          mem[(64 * _param3.length) + (64 * _param2.length) + ceil32(_param4.length) + 420] = _param4.length
          mem[(64 * _param3.length) + (64 * _param2.length) + ceil32(_param4.length) + 452 len ceil32(_param4.length)] = _param4[all], mem[(32 * _param2.length) + (32 * _param3.length) + _param4.length + 192 len ceil32(_param4.length) - _param4.length]
          if not _param4.length % 32:
              require ext_code.size(_param1)
              call _param1 with:
                   gas gas_remaining wei
                  args caller, owner, Array(len=_param2.length, data=call.data[_param2 + 36 len floor32(_param2.length)], mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + floor32(_param2.length) + 388 len (32 * _param2.length) + (32 * _param3.length) + _param4.length + -floor32(_param2.length) + 64]), (32 * _param2.length) + 192, (32 * _param3.length) + (32 * _param2.length) + 224
          else:
              mem[floor32(_param4.length) + (64 * _param3.length) + (64 * _param2.length) + ceil32(_param4.length) + 452] = mem[floor32(_param4.length) + (64 * _param3.length) + (64 * _param2.length) + ceil32(_param4.length) + -(_param4.length % 32) + 484 len _param4.length % 32]
              require ext_code.size(_param1)
              call _param1 with:
                   gas gas_remaining wei
                  args caller, owner, Array(len=_param2.length, data=call.data[_param2 + 36 len floor32(_param2.length)], mem[(32 * _param2.length) + (32 * _param3.length) + ceil32(_param4.length) + floor32(_param2.length) + 388 len (32 * _param2.length) + (32 * _param3.length) + floor32(_param4.length) + -floor32(_param2.length) + 96]), (32 * _param2.length) + 192, (32 * _param3.length) + (32 * _param2.length) + 224
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if Mask(32, 224, ext_call.return_data[0]) != 0xbc197c8100000000000000000000000000000000000000000000000000000000:
              revert with 0, 
                          32,
                          63,
                          0x4845524331313535235f63616c6c6f6e45524331313535426174636852656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                          uint8((32 * _param2.length) + 192)

def safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes _data) payable: 
  require calldata.size - 4 >= 160
  require _data <= 4294967296
  require _data + 36 <= calldata.size
  require _data.length <= 4294967296 and _data + _data.length + 36 <= calldata.size
  if uint256(stor0[addr(_from)][_id]) >= _value:
      if caller == _from:
          if not _to:
              revert with 0, 
                          32,
                          43,
                          0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                          mem[ceil32(_data.length) + 239 len 21]
          if _value > uint256(stor0[addr(_from)][_id]):
              revert with 0, 'SafeMath#sub: UNDERFLOW'
          uint256(stor0[addr(_from)][_id]) -= _value
          if uint256(stor0[addr(_to)][_id]) + _value < uint256(stor0[addr(_to)][_id]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_to)][_id]) += _value
          mem[ceil32(_data.length) + 128] = _id
          mem[ceil32(_data.length) + 160] = _value
          log 0xc3d58168: Mask(8 * -ceil32(_data.length) + _data.length + 32, 0, 0), mem[_data.length + 160 len -_data.length + ceil32(_data.length) + 32], caller, _from, _to
      else:
          require ext_code.size(unknowncd7c0326Address)
          static call unknowncd7c0326Address.proxies(address param1) with:
                  gas gas_remaining wei
                 args _from
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if ext_call.return_data[12 len 20] != caller:
              if not stor1[addr(_from)][caller]:
                  revert with 0, 
                              32,
                              42,
                              0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                              mem[ceil32(_data.length) + 238 len 22]
          if not _to:
              revert with 0, 
                          32,
                          43,
                          0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                          mem[ceil32(_data.length) + 239 len 21]
          if _value > uint256(stor0[addr(_from)][_id]):
              revert with 0, 'SafeMath#sub: UNDERFLOW'
          uint256(stor0[addr(_from)][_id]) -= _value
          if uint256(stor0[addr(_to)][_id]) + _value < uint256(stor0[addr(_to)][_id]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_to)][_id]) += _value
          log 0xc3d58168: 0, Mask(224, 0, _id), _value, caller, _from, _to
      if ext_code.hash(_to):
          if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
              require ext_code.size(_to)
              call _to with:
                   gas gas_remaining wei
                  args caller, addr(_from), _id, _value, Array(len=_data.length, data=_data[all])
              if not ext_call.success:
                  revert with ext_call.return_data[0 len return_data.size]
              require return_data.size >= 32
              if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                  revert with 0, 
                              32,
                              58,
                              0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                              _value % 281474976710656
  else:
      if uint256(stor0[addr(_from)][_id]) > _value:
          revert with 0, 'SafeMath#sub: UNDERFLOW'
      if owner == caller:
          if not _id:
              if _value - uint256(stor0[addr(_from)][_id]) > 0:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_data.length) + 249 len 11]
          else:
              if _id > 1111:
                  if _value - uint256(stor0[addr(_from)][_id]) > 0:
                      revert with 0, 
                                  32,
                                  53,
                                  0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[ceil32(_data.length) + 249 len 11]
              else:
                  if totalSupply[_id] > 1:
                      revert with 0, 'SafeMath#sub: UNDERFLOW'
                  if _value - uint256(stor0[addr(_from)][_id]) > -totalSupply[_id] + 1:
                      revert with 0, 
                                  32,
                                  53,
                                  0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[ceil32(_data.length) + 249 len 11]
          if uint256(stor0[addr(_to)][_id]) + _value - uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_to)][_id]) = uint256(stor0[addr(_to)][_id]) + _value - uint256(stor0[addr(_from)][_id])
          if totalSupply[_id] + _value - uint256(stor0[addr(_from)][_id]) < totalSupply[_id]:
              revert with 0, 'SafeMath#add: OVERFLOW'
          totalSupply[_id] = totalSupply[_id] + _value - uint256(stor0[addr(_from)][_id])
          mem[ceil32(_data.length) + 128] = _id
          mem[ceil32(_data.length) + 160] = _value - uint256(stor0[addr(_from)][_id])
          log 0xc3d58168: Mask(8 * -ceil32(_data.length) + _data.length + 32, 0, 0), mem[_data.length + 160 len -_data.length + ceil32(_data.length) + 32], caller, owner, _to
          if not ext_code.hash(_to):
              if uint256(stor0[addr(_from)][_id]) > 0:
                  if caller == _from:
                      if not _to:
                          revert with 0, 
                                      32,
                                      43,
                                      0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                      mem[ceil32(_data.length) + 239 len 21]
                      if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                          revert with 0, 'SafeMath#sub: UNDERFLOW'
                      uint256(stor0[addr(_from)][_id]) = 0
                      if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                          revert with 0, 'SafeMath#add: OVERFLOW'
                      uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                      mem[ceil32(_data.length) + 128] = _id
                      mem[ceil32(_data.length) + 160] = uint256(stor0[addr(_from)][_id])
                      log 0xc3d58168: Mask(8 * -ceil32(_data.length) + _data.length + 32, 0, 0), mem[_data.length + 160 len -_data.length + ceil32(_data.length) + 32], caller, _from, _to
                  else:
                      require ext_code.size(unknowncd7c0326Address)
                      static call unknowncd7c0326Address.proxies(address param1) with:
                              gas gas_remaining wei
                             args _from
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      if ext_call.return_data[12 len 20] != caller:
                          if not stor1[addr(_from)][caller]:
                              revert with 0, 
                                          32,
                                          42,
                                          0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                          mem[ceil32(_data.length) + 238 len 22]
                      if not _to:
                          revert with 0, 
                                      32,
                                      43,
                                      0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                      mem[ceil32(_data.length) + 239 len 21]
                      if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                          revert with 0, 'SafeMath#sub: UNDERFLOW'
                      uint256(stor0[addr(_from)][_id]) = 0
                      if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                          revert with 0, 'SafeMath#add: OVERFLOW'
                      uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                      log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                  if ext_code.hash(_to):
                      if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                          require ext_code.size(_to)
                          call _to with:
                               gas gas_remaining wei
                              args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                              revert with 0, 
                                          32,
                                          58,
                                          0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                          stor0[addr(_from)][_id] % 281474976710656
          else:
              if ext_code.hash(_to) == 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                  if uint256(stor0[addr(_from)][_id]) > 0:
                      if caller == _from:
                          if not _to:
                              revert with 0, 
                                          32,
                                          43,
                                          0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                          mem[ceil32(_data.length) + 239 len 21]
                          if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                              revert with 0, 'SafeMath#sub: UNDERFLOW'
                          uint256(stor0[addr(_from)][_id]) = 0
                          if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                              revert with 0, 'SafeMath#add: OVERFLOW'
                          uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                          mem[ceil32(_data.length) + 128] = _id
                          mem[ceil32(_data.length) + 160] = uint256(stor0[addr(_from)][_id])
                          log 0xc3d58168: Mask(8 * -ceil32(_data.length) + _data.length + 32, 0, 0), mem[_data.length + 160 len -_data.length + ceil32(_data.length) + 32], caller, _from, _to
                      else:
                          require ext_code.size(unknowncd7c0326Address)
                          static call unknowncd7c0326Address.proxies(address param1) with:
                                  gas gas_remaining wei
                                 args _from
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if ext_call.return_data[12 len 20] != caller:
                              if not stor1[addr(_from)][caller]:
                                  revert with 0, 
                                              32,
                                              42,
                                              0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                              mem[ceil32(_data.length) + 238 len 22]
                          if not _to:
                              revert with 0, 
                                          32,
                                          43,
                                          0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                          mem[ceil32(_data.length) + 239 len 21]
                          if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                              revert with 0, 'SafeMath#sub: UNDERFLOW'
                          uint256(stor0[addr(_from)][_id]) = 0
                          if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                              revert with 0, 'SafeMath#add: OVERFLOW'
                          uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                          log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                      if ext_code.hash(_to):
                          if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                              require ext_code.size(_to)
                              call _to with:
                                   gas gas_remaining wei
                                  args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                                  revert with 0, 
                                              32,
                                              58,
                                              0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                              stor0[addr(_from)][_id] % 281474976710656
              else:
                  require ext_code.size(_to)
                  call _to with:
                       gas gas_remaining wei
                      args caller, owner, _id, _value - uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                      revert with 0, 
                                  32,
                                  58,
                                  0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                  _value - uint256(stor0[addr(_from)][_id]) % 281474976710656
                  if uint256(stor0[addr(_from)][_id]) > 0:
                      if _from != caller:
                          require ext_code.size(unknowncd7c0326Address)
                          static call unknowncd7c0326Address.proxies(address param1) with:
                                  gas gas_remaining wei
                                 args _from
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if ext_call.return_data[12 len 20] != caller:
                              if not stor1[addr(_from)][caller]:
                                  revert with 0, 
                                              32,
                                              42,
                                              0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                              Mask(176, 0, _value - uint256(stor0[addr(_from)][_id]))
                      if not _to:
                          revert with 0, 
                                      32,
                                      43,
                                      0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                      Mask(168, 0, _value - uint256(stor0[addr(_from)][_id]))
                      if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                          revert with 0, 'SafeMath#sub: UNDERFLOW'
                      uint256(stor0[addr(_from)][_id]) = 0
                      if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                          revert with 0, 'SafeMath#add: OVERFLOW'
                      uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                      log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                      if ext_code.hash(_to):
                          if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                              require ext_code.size(_to)
                              call _to with:
                                   gas gas_remaining wei
                                  args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                                  revert with 0, 
                                              32,
                                              58,
                                              0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                              stor0[addr(_from)][_id] % 281474976710656
      else:
          require ext_code.size(unknowncd7c0326Address)
          static call unknowncd7c0326Address.proxies(address param1) with:
                  gas gas_remaining wei
                 args owner
          if not ext_call.success:
              revert with ext_call.return_data[0 len return_data.size]
          require return_data.size >= 32
          if ext_call.return_data[12 len 20] != caller:
              revert with 0, 
                          32,
                          46,
                          0x44455243313135355472616461626c65236f6e6c794f776e65723a2043414c4c45525f49535f4e4f545f4f574e45,
                          mem[ceil32(_data.length) + 242 len 18]
          if not _id:
              if _value - uint256(stor0[addr(_from)][_id]) > 0:
                  revert with 0, 
                              32,
                              53,
                              0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                              mem[ceil32(_data.length) + 249 len 11]
          else:
              if _id > 1111:
                  if _value - uint256(stor0[addr(_from)][_id]) > 0:
                      revert with 0, 
                                  32,
                                  53,
                                  0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[ceil32(_data.length) + 249 len 11]
              else:
                  if totalSupply[_id] > 1:
                      revert with 0, 'SafeMath#sub: UNDERFLOW'
                  if _value - uint256(stor0[addr(_from)][_id]) > -totalSupply[_id] + 1:
                      revert with 0, 
                                  32,
                                  53,
                                  0x544173736574436f6e7472616374236d696e743a205155414e544954595f455843454544535f544f4b454e5f535550504c595f4341,
                                  mem[ceil32(_data.length) + 249 len 11]
          if uint256(stor0[addr(_to)][_id]) + _value - uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
              revert with 0, 'SafeMath#add: OVERFLOW'
          uint256(stor0[addr(_to)][_id]) = uint256(stor0[addr(_to)][_id]) + _value - uint256(stor0[addr(_from)][_id])
          if totalSupply[_id] + _value - uint256(stor0[addr(_from)][_id]) < totalSupply[_id]:
              revert with 0, 'SafeMath#add: OVERFLOW'
          totalSupply[_id] = totalSupply[_id] + _value - uint256(stor0[addr(_from)][_id])
          log 0xc3d58168: 0, Mask(224, 0, _id), _value - uint256(stor0[addr(_from)][_id]), caller, owner, _to
          if not ext_code.hash(_to):
              if uint256(stor0[addr(_from)][_id]) > 0:
                  if _from != caller:
                      require ext_code.size(unknowncd7c0326Address)
                      static call unknowncd7c0326Address.proxies(address param1) with:
                              gas gas_remaining wei
                             args _from
                      if not ext_call.success:
                          revert with ext_call.return_data[0 len return_data.size]
                      require return_data.size >= 32
                      if ext_call.return_data[12 len 20] != caller:
                          if not stor1[addr(_from)][caller]:
                              revert with 0, 
                                          32,
                                          42,
                                          0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                          mem[ceil32(_data.length) + 238 len 22]
                  if not _to:
                      revert with 0, 
                                  32,
                                  43,
                                  0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                  mem[ceil32(_data.length) + 239 len 21]
                  if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                      revert with 0, 'SafeMath#sub: UNDERFLOW'
                  uint256(stor0[addr(_from)][_id]) = 0
                  if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                      revert with 0, 'SafeMath#add: OVERFLOW'
                  uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                  log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                  if ext_code.hash(_to):
                      if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                          require ext_code.size(_to)
                          call _to with:
                               gas gas_remaining wei
                              args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                              revert with 0, 
                                          32,
                                          58,
                                          0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                          stor0[addr(_from)][_id] % 281474976710656
          else:
              if ext_code.hash(_to) == 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                  if uint256(stor0[addr(_from)][_id]) > 0:
                      if _from != caller:
                          require ext_code.size(unknowncd7c0326Address)
                          static call unknowncd7c0326Address.proxies(address param1) with:
                                  gas gas_remaining wei
                                 args _from
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if ext_call.return_data[12 len 20] != caller:
                              if not stor1[addr(_from)][caller]:
                                  revert with 0, 
                                              32,
                                              42,
                                              0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                              mem[ceil32(_data.length) + 238 len 22]
                      if not _to:
                          revert with 0, 
                                      32,
                                      43,
                                      0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                      mem[ceil32(_data.length) + 239 len 21]
                      if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                          revert with 0, 'SafeMath#sub: UNDERFLOW'
                      uint256(stor0[addr(_from)][_id]) = 0
                      if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                          revert with 0, 'SafeMath#add: OVERFLOW'
                      uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                      log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                      if ext_code.hash(_to):
                          if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                              require ext_code.size(_to)
                              call _to with:
                                   gas gas_remaining wei
                                  args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                                  revert with 0, 
                                              32,
                                              58,
                                              0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                              stor0[addr(_from)][_id] % 281474976710656
              else:
                  require ext_code.size(_to)
                  call _to with:
                       gas gas_remaining wei
                      args caller, owner, _id, _value - uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                  if not ext_call.success:
                      revert with ext_call.return_data[0 len return_data.size]
                  require return_data.size >= 32
                  if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                      revert with 0, 
                                  32,
                                  58,
                                  0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                  _value - uint256(stor0[addr(_from)][_id]) % 281474976710656
                  if uint256(stor0[addr(_from)][_id]) > 0:
                      if _from != caller:
                          require ext_code.size(unknowncd7c0326Address)
                          static call unknowncd7c0326Address.proxies(address param1) with:
                                  gas gas_remaining wei
                                 args _from
                          if not ext_call.success:
                              revert with ext_call.return_data[0 len return_data.size]
                          require return_data.size >= 32
                          if ext_call.return_data[12 len 20] != caller:
                              if not stor1[addr(_from)][caller]:
                                  revert with 0, 
                                              32,
                                              42,
                                              0x734552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f4f50455241544f,
                                              Mask(176, 0, _value - uint256(stor0[addr(_from)][_id]))
                      if not _to:
                          revert with 0, 
                                      32,
                                      43,
                                      0xfe4552433131353523736166655472616e7366657246726f6d3a20494e56414c49445f524543495049454e,
                                      Mask(168, 0, _value - uint256(stor0[addr(_from)][_id]))
                      if uint256(stor0[addr(_from)][_id]) > uint256(stor0[addr(_from)][_id]):
                          revert with 0, 'SafeMath#sub: UNDERFLOW'
                      uint256(stor0[addr(_from)][_id]) = 0
                      if uint256(stor0[addr(_to)][_id]) + uint256(stor0[addr(_from)][_id]) < uint256(stor0[addr(_to)][_id]):
                          revert with 0, 'SafeMath#add: OVERFLOW'
                      uint256(stor0[addr(_to)][_id]) += uint256(stor0[addr(_from)][_id])
                      log 0xc3d58168: 0, Mask(224, 0, _id), uint256(stor0[addr(_from)][_id]), caller, _from, _to
                      if ext_code.hash(_to):
                          if ext_code.hash(_to) != 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470:
                              require ext_code.size(_to)
                              call _to with:
                                   gas gas_remaining wei
                                  args caller, addr(_from), _id, uint256(stor0[addr(_from)][_id]), Array(len=_data.length, data=_data[all])
                              if not ext_call.success:
                                  revert with ext_call.return_data[0 len return_data.size]
                              require return_data.size >= 32
                              if Mask(32, 224, ext_call.return_data[0]) != 0xf23a6e6100000000000000000000000000000000000000000000000000000000:
                                  revert with 0, 
                                              32,
                                              58,
                                              0x4545524331313535235f63616c6c6f6e4552433131353552656365697665643a20494e56414c49445f4f4e5f524543454956455f4d4553534147,
                                              stor0[addr(_from)][_id] % 281474976710656

